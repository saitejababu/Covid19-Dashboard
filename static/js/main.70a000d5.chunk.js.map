{"version":3,"sources":["Components/InfoBox/InfoBox.js","Components/Table/Table.js","util.js","Components/Graph/Graph.js","Components/Graph/CountryGraph.js","Components/Graph/Chart.js","Components/Map/Map.js","Components/Icons.js","App.js","serviceWorker.js","index.js","images/Globe_img.JPG","images/covid_logo.JPG"],"names":["InfoBox","title","cases","active","total","isRed","date","props","Card","item","xs","md","onClick","className","CardContent","Typography","color","gutterBottom","variant","component","Table","countries","info","console","log","country","style","backgroundImage","countryInfo","flag","width","height","backgroundSize","borderRadius","marginTop","critical","recovered","deaths","tests","src","Globe_img","alt","map","data","casesTypeColors","hex","rgb","half_op","multiplier","sortData","sortedData","sort","a","b","checkInputValid","countryCode","newcountryCode","toUpperCase","val","name","value","FormatNum","stat","numeral","format","options","legend","display","elements","point","radius","text","fontSize","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","newDataPoint","x","y","push","Graph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","CountryGraph","myUrl","timeline","Chart","labels","Map","center","zoom","TileLayer","url","attribution","Circle","lat","long","fillColor","fillOpacity","Math","sqrt","onMouseOver","e","target","openPopup","onMouseOut","closePopup","Popup","showDataOnMap","Icons","FacebookShareButton","quote","hashtag","FacebookIcon","size","round","TwitterShareButton","TwitterIcon","EmailShareButton","EmailIcon","refreshPage","window","location","reload","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","SelectorView","setSelectorView","infoView","setinfoView","chartView","setchartView","mapButtoncolour","setmapButton","tableButtoncolour","settableButton","graphButtoncolour","setgraphButton","setDate","iso2","getCountriesData","OnCountryChange","event","alert","lng","map_class","table_class","graph_class","lastupdated","buildlastupdated","year","mon","dd","charAt","substring","day","Date","nextDay","getDate","res","toString","substr","Tooltip","placement","arrow","covid_logo","Autocomplete","freeSolo","id","disableClearable","onChange","getOptionLabel","renderOption","Icon","filterSelectedOptions","renderInput","params","TextField","margin","InputProps","todayCases","todayRecovered","todayDeaths","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.70a000d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, active,total ,isRed,date, ...props}) {\r\n  return (\r\n    <Card  item xs={12} md={3} onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${\r\n      isRed && \"infoBox--red\"\r\n    }`}>\r\n    <CardContent >\r\n      <Typography  className=\"infoBox__title\" color=\"textSecondary\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <Typography className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`} variant=\"h5\" component=\"h1\">\r\n       {cases}\r\n      </Typography>\r\n      <Typography className=\"infoBox__date\" variant=\"body1\" component=\"p\">\r\n       Last Updated : {date} \r\n      </Typography>\r\n      <Typography className=\"infoBox__total\" variant=\"body1\" component=\"p\">\r\n      {total} Total Cases\r\n      </Typography>\r\n    </CardContent>\r\n  </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport './Table.css';\r\nimport Globe_img from '../../images/Globe_img.JPG';\r\n\r\nfunction Table({countries, info}) {\r\n    console.log(countries);\r\n    console.log(info.country);\r\n\r\n    if(!info.country)\r\n    {\r\n        return (\r\n            <div className=\"table\">    \r\n            <thead>\r\n                <tr>\r\n                    \r\n                    <th className=\"sticky-column\">Name</th>\r\n                    <th className=\"sticky-column\">Total Cases</th>\r\n                    <th className=\"sticky-column\">Active Cases</th>\r\n                    <th className=\"sticky-column\">Critical Cases</th>\r\n                    <th className=\"sticky-column\">Recovered Cases</th>\r\n                    <th className=\"sticky-column\">Deaths</th>\r\n                    <th className=\"sticky-column\">Tests Performed</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    {!info.country &&(\r\n                        <td>\r\n                        <div className=\"div__flag\">\r\n                        <img src={Globe_img}  alt=\"\" width=\"50px\" height=\"40px\"/>\r\n                            <div  style={ {marginTop:10}}> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Global</div>\r\n                        </div>\r\n                        </td>\r\n                    )}\r\n    \r\n                    {info.country &&(\r\n                        <td >\r\n                        <div className=\"div__flag\">\r\n                        <div \r\n                    style={{ backgroundImage: `url(${info.countryInfo.flag})` ,width:60,\r\n                    height: 40, backgroundSize :'cover', borderRadius:5 ,marginTop:5}}>\r\n                    </div>\r\n                    <div  style={ {marginTop:10}}>\r\n                    &nbsp;&nbsp;&nbsp;{info.country}\r\n                    </div>\r\n                        </div>\r\n                    \r\n                    </td>\r\n                    )}\r\n                    <td>{info.cases}</td>\r\n                    <td>{info.active}</td>\r\n                    <td>{info.critical}</td>\r\n                    <td>{info.recovered}</td>\r\n                    <td>{info.deaths}</td>\r\n                    <td>{info.tests}</td>\r\n                </tr>\r\n    \r\n                {countries.map( data=>(\r\n                    <tr> \r\n                        <td>\r\n                           <div className=\"div__flag\">\r\n                            <div \r\n                        style={{ backgroundImage: `url(${data.countryInfo.flag})` ,width:60,\r\n                        height: 40, backgroundSize :'cover', borderRadius:5 ,marginTop:5}}>\r\n                        </div>\r\n                        <div  style={ {marginTop:10}}>\r\n                        &nbsp;&nbsp;&nbsp;{data.country}\r\n                        </div>\r\n                            </div>\r\n                        \r\n                        </td>\r\n                        <td>{data.cases}</td>\r\n                        <td>{data.active}</td>\r\n                        <td>{data.critical}</td>\r\n                        <td>{data.recovered}</td>\r\n                        <td>{data.deaths}</td>\r\n                        <td>{data.tests}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>           \r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    else if(info.country)\r\n    {\r\n\r\n        return (\r\n            <div className=\"table\">    \r\n            <thead>\r\n                <tr>\r\n                    \r\n                    <th className=\"sticky-column\">Name</th>\r\n                    <th className=\"sticky-column\">Total Cases</th>\r\n                    <th className=\"sticky-column\">Active Cases</th>\r\n                    <th className=\"sticky-column\">Critical Cases</th>\r\n                    <th className=\"sticky-column\">Recovered Cases</th>\r\n                    <th className=\"sticky-column\">Deaths</th>\r\n                    <th className=\"sticky-column\">Tests Performed</th>\r\n                    \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                        <td >\r\n                        <div className=\"div__flag\">\r\n                        <div \r\n                    style={{ backgroundImage: `url(${info.countryInfo.flag})` ,width:60,\r\n                    height: 40, backgroundSize :'cover', borderRadius:5 ,marginTop:5}}>\r\n                    </div>\r\n                    <div  style={ {marginTop:10}}>\r\n                    &nbsp;&nbsp;&nbsp;{info.country}\r\n                    </div>\r\n                        </div>\r\n                    \r\n                    </td>\r\n                    \r\n                    <td>{info.cases}</td>\r\n                    <td>{info.active}</td>\r\n                    <td>{info.critical}</td>\r\n                    <td>{info.recovered}</td>\r\n                    <td>{info.deaths}</td>\r\n                    <td>{info.tests}</td>\r\n                 \r\n                </tr>\r\n    \r\n                \r\n            </tbody>           \r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    \r\n    \r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n      if (a.cases > b.cases) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n    return sortedData;\r\n  };\r\n\r\n\r\n\r\n  export const checkInputValid= (countryCode, countries) => {\r\n    //console.log(countryCode);\r\n\r\n    var newcountryCode = countryCode.toUpperCase();\r\n     let val =0;\r\n    \r\n    countries.map(country=>{\r\n     if(newcountryCode===(country.name).toUpperCase() || newcountryCode===country.value)\r\n      {\r\n      val=1;\r\n      }\r\n      return 0;\r\n    })\r\n    return val;\r\n  };\r\n   \r\n\r\n  \r\n\r\n\r\n  export const FormatNum = (stat) =>\r\n  stat ? `+ ${numeral(stat).format(\"0.0a\")}` : \"No New Cases \";\r\n\r\n  export const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n\r\n      onMouseOver={(e) => {\r\n        e.target.openPopup();\r\n      }}\r\n      onMouseOut={(e) => {\r\n        e.target.closePopup();\r\n      }}\r\n    >\r\n\r\n\r\n       <Popup>\r\n         <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n        \r\n      </Popup>\r\n    </Circle>\r\n  ));","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  title:{\r\n    display: true,\r\n    text:'World Wide Cases',\r\n    fontSize:15\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction Graph({ casesType}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=210\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\nconsole.log(data);\r\n  return (\r\n    <div>\r\n\r\n      { casesType===\"cases\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n          \r\n        />\r\n      )}\r\n\r\n    { casesType===\"recovered\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"lightgreen\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n        />\r\n      )}\r\n\r\n    { casesType===\"deaths\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n            \r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Graph;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  title:{\r\n    display: true,\r\n    text:'New Cases data',\r\n    fontSize:15\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction CountryGraph({ casesType, country}) {\r\n  const [data, setData] = useState({});\r\n\r\n  console.log(country);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const myUrl =`https://disease.sh/v3/covid-19/historical/${country}?lastdays=210`\r\n      await fetch(myUrl)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          if(data.timeline)\r\n          {\r\n            let chartData = buildChartData(data.timeline, casesType);\r\n            setData(chartData);\r\n          }\r\n          \r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType, country]);\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      { casesType===\"cases\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n          \r\n        />\r\n      )}\r\n\r\n    { casesType===\"recovered\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"lightgreen\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n        />\r\n      )}\r\n\r\n    { casesType===\"deaths\" && data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n            \r\n          }}\r\n          height={500}\r\n          width={1000}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default CountryGraph;","import React from 'react';\r\nimport {Bar, Pie} from 'react-chartjs-2';\r\n\r\n\r\nfunction Chart({info}) {\r\n    \r\n    \r\n    return (\r\n        <div className=\"app__Chart\">\r\n\r\n          <Bar\r\n         data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n              {\r\n                label: 'cases',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [info.cases, info.recovered, info.deaths],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: 'Total Covid Cases in  '   +info.country ,fontSize:15},\r\n            gridLines: {\r\n                display: false,\r\n              }\r\n          }}\r\n          \r\n        />\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          &nbsp;&nbsp;\r\n          <Pie\r\n         data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            \r\n            datasets: [\r\n              {\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [info.cases, info.recovered, info.deaths],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: true },\r\n            \r\n          }}\r\n        height=\"130%\"\r\n        />\r\n        \r\n            \r\n\r\n      \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chart;\r\n","\r\nimport React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../../util\";\r\nimport \"./Map.css\";\r\n\r\nfunction Map({countries , casesType, center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries , casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport {\r\n    EmailShareButton,\r\n    FacebookShareButton,\r\n    TwitterShareButton,\r\n    FacebookIcon,\r\n    TwitterIcon,\r\n    EmailIcon\r\n    \r\n  } from \"react-share\";\r\n\r\n  function Icons() {\r\n      return (\r\n          <div >\r\n          <FacebookShareButton\r\n               url={\"https://saitejababu.github.io/Covid19-dashboard\"}\r\n                quote={\"Check out the new covid tracker\"}\r\n                hashtag=\"#Covid19_Dashboard\"\r\n                className=\"socialMediaButton\">\r\n                \r\n          <FacebookIcon size={36} round={true}/>\r\n          </FacebookShareButton>\r\n          <TwitterShareButton \r\n                url={\"https://saitejababu.github.io/Covid19-dashboard\"}\r\n                quote={\"Check out the new covid tracker\"}\r\n                hashtag=\"#Covid19_Dashboard\"\r\n                className=\"socialMediaButton\">\r\n                \r\n          <TwitterIcon size={36} round={true}/>\r\n          </TwitterShareButton>\r\n          <EmailShareButton \r\n                url={\"https://saitejababu.github.io/Covid19-dashboard\"}\r\n                quote={\"Check out the new covid tracker\"}\r\n                hashtag=\"#Covid19_Dashboard\"\r\n                className=\"socialMediaButton\">\r\n                \r\n          <EmailIcon size={36} round={true}/>\r\n          </EmailShareButton>\r\n          </div>\r\n      )\r\n  }\r\n\r\n\r\n \r\n  \r\n  export default Icons\r\n  ","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./Components/InfoBox/InfoBox\";\nimport Table from './Components/Table/Table';\nimport {sortData ,FormatNum , checkInputValid} from './util';\nimport Graph from './Components/Graph/Graph';\nimport CountryGraph from './Components/Graph/CountryGraph';\nimport Chart from './Components/Graph/Chart';\nimport Map from './Components/Map/Map';\nimport \"leaflet/dist/leaflet.css\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport numeral from \"numeral\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Icons from './Components/Icons';\nimport { Icon } from '@material-ui/core';\nimport Globe_img from '../src/images/Globe_img.JPG';\nimport covid_logo from '../src/images/covid_logo.JPG';\n\nfunction App() {\n\n  const [country , setInputCountry] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState([34.80746, 20.4796]); //Latitude and longitude to set the map\n  const [mapZoom, setMapZoom] = useState(2.4); // Zoom set to Map\n  const [SelectorView, setSelectorView] = useState(\"map\"); // Default selector state as map view\n  const [infoView, setinfoView] = useState(\"display\");\n  const [chartView,setchartView] = useState(\"line\");\n  const [mapButtoncolour, setmapButton] = useState(true);\n  const [tableButtoncolour, settableButton] = useState(false);\n  const [graphButtoncolour, setgraphButton] = useState(false);\n  const [date, setDate] = useState([]);\n  \n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);// Fetching Global data\n      });\n  }, []);\n\n  \n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")//fetching country data\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value : country.countryInfo.iso2,\n            flag: country.countryInfo.flag\n          }));\n          const sortedData=sortData(data) // sorting cases from High to Low as Table data\n        \n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n          \n        });\n    };\n    getCountriesData();\n  }, []);\n\n  \n\n\n  const OnCountryChange = async (event, value) => {\n    const countryCode = value ? value : event.target.value\n    setinfoView(\"countryDisplay\");\n    setchartView(\"bar/pie\");\n    \n    \n    let checkvalid= checkInputValid(countryCode, countries); // input field validation\n   \n    if(checkvalid===0)\n    {\n      alert(\"No country data found\");\n      refreshPage() ;\n    }\n    else{\n    const url = `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        \n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        \n        const lat = data.countryInfo.lat;\n        const lng = data.countryInfo.long;\n        setMapCenter([ 0,0 ]); // reseting latitude and longitude values \n        setMapZoom(4);\n        if(lat && lng)\n        {\n          setMapCenter([ lat,lng ]);\n          setMapZoom(4);\n        }\n        \n      });   \n    }\n  }\n  \n\n\n\n  \n// view selector classes for CSS Styling\n  let map_class = mapButtoncolour ? \"showBlue\" : \"showGrey\";\n  let table_class = tableButtoncolour ? \"showBlue\" : \"showGrey\";\n  let graph_class = graphButtoncolour ? \"showBlue\" : \"showGrey\";\n\n\n  // view selection buttons \n  const onClickChart = () => {\n    setSelectorView(\"graph\");\n    setgraphButton(true);\n    setmapButton(false);\n    settableButton(false);\n  }\n\n  const onClickMap = () => {\n    setSelectorView(\"map\");\n    setmapButton(true);\n    setgraphButton(false);\n    settableButton(false);\n\n  }\n\n  const onClickTable = () => {\n    setSelectorView(\"table\");\n    settableButton(true);\n    setgraphButton(false);\n    setmapButton(false);\n\n  }\n\n//Fetching lastupdated date\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=1\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let lastupdated = buildlastupdated(data);\n          setDate(lastupdated);\n        });\n    };\n\n    fetchData();\n  }, []);\n\n  const buildlastupdated = (data) => {\n    let lastupdated, year,mon,dd;\n    \n    for (let date in data.cases) {\n        lastupdated= date;\n    }\n    console.log(lastupdated);\n    if(lastupdated.charAt(1)===\"/\")\n    {\n      lastupdated=\"0\"+lastupdated;\n    }\n\n    if(lastupdated.charAt(4)===\"/\")\n    {\n      lastupdated=lastupdated.substring(0,3)+\"0\"+lastupdated.substring(3,8);\n    }\n    \n\n       year = '20'+lastupdated.substring(6,8);\n       mon = lastupdated.substring(0,2);\n       dd = lastupdated.substring(3,5);\n      //changing unformatted data to formatted data \n      \n       if(mon===\"01\")\n       {\n         mon= \"jan\"\n       }\n       else if(mon===\"02\")\n       {\n         mon= \"feb\"\n       }\n       else if(mon===\"03\")\n       {\n         mon= \"mar\"\n       }\n       else if(mon===\"04\")\n       {\n         mon= \"apr\"\n       }\n       else if(mon===\"05\")\n       {\n         mon= \"may\"\n       }\n       else if(mon===\"06\")\n       {\n         mon= \"jun\"\n       }\n       else if(mon===\"07\")\n       {\n         mon= \"jul\"\n       }\n       else if(mon===\"08\")\n       {\n         mon= \"aug\"\n       }\n       else if(mon===\"09\")\n       {\n         mon= \"sep\"\n       }\n       else if(mon===\"10\")\n       {\n         mon= \"oct\"\n       }\n       else if(mon===\"11\")\n       {\n         mon= \"nov\"\n       }\n       else if(mon===\"12\")\n       {\n         mon= \"dec\"\n       }\n       \n\n       var day = new Date(mon+' '+dd+' '+year);\n      \n       var nextDay = new Date(day);\n       nextDay.setDate(day.getDate()+1);\n      \n       var res = nextDay.toString().substr(0, 15);\n       console.log(res);\n       return res;\n  };\n\n    \n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        \n        <div className=\"app__logo\">\n        <Tooltip \n         title=\"Click here to refresh page\"\n         placement=\"right\" \n         arrow  >\n        <img src={covid_logo} onClick={refreshPage} alt=\"\"/></Tooltip>\n        </div>\n        \n        <div className=\"search__box\">\n        <Autocomplete className =\"app_CountrySelector\"\n        freeSolo\n        id=\"free-solo-2-demo\"\n        disableClearable\n        //value={country.name}\n        onChange={(event, value) => OnCountryChange(event,value.name)}\n        options={countries.map((country) => country)}\n        \n        //noOptionsText={'No Options'}\n        getOptionLabel={country => country.name}\n        renderOption={country => {\n          return (\n          <Fragment>\n            \n              <Icon style={{ backgroundImage: `url(${country.flag})`, backgroundSize: \"cover\",\n              width:50,height:35, borderRadius:5}} />\n            &nbsp;&nbsp;&nbsp;&nbsp; {country.name}\n             </Fragment>\n      );\n \n      }}\n      filterSelectedOptions\n\n        renderInput={(params) => (\n          <Fragment>\n            <TextField\n            {...params}\n            label=\"Search by Country\"\n            margin=\"none\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n          </Fragment>\n          \n        )}\n        />\n        </div>\n\n        <div className=\"app__icons\"><Icons/></div> {/* Social Media Icons*/}\n      </div> \n\n\n      {/* end oh header*/}\n\n      <div className=\"app__info\" >\n\n      {infoView===\"display\"&& (\n        <div className=\"country__info\"><p>Coronavirus Disease (COVID-19) Dashboard</p></div>\n      )}\n\n      {infoView===\"countryDisplay\"&& countryInfo.countryInfo && countryInfo.countryInfo.flag && (\n      <div className=\"country__info\" >\n        <img src={Globe_img}  alt=\"\" width=\"50px\" height=\"40px\"/>&nbsp;&nbsp;Global &nbsp;&nbsp; >  &nbsp;&nbsp;\n        <div className=\"info-flag\"\n        style={{ backgroundImage: `url(${countryInfo.countryInfo.flag})` ,width:50,\n        height:35, borderRadius:5}}\n     ></div>\n        &nbsp;&nbsp;{countryInfo.country}</div>\n      )}\n\n\n        <div className=\"view__selector\">\n        <button className={map_class} onClick = {onClickMap}>Map view</button>\n        <button className={table_class} onClick = {onClickTable}>Table view</button>\n        <button className={graph_class} onClick = {onClickChart}>Chart view</button>\n        </div>\n\n      </div> \n\n      {/* end oh app info*/}\n\n      <div className=\"app__body\">\n        <div className=\"app__stats\">\n        <InfoBox \n        onClick={(e) => setCasesType(\"cases\")}  \n        isRed\n        active={casesType === \"cases\"} \n        title=\"Infected\" \n        cases={FormatNum(countryInfo.todayCases)} \n        total={numeral(countryInfo.cases).format(\"0.0a\")}\n        date={date}\n        />\n\n        <InfoBox \n        onClick={(e) => setCasesType(\"recovered\")} \n        active={casesType === \"recovered\"}\n        title=\"Recovered\" \n        cases={FormatNum(countryInfo.todayRecovered)} \n        total={numeral(countryInfo.recovered).format(\"0.0a\")}\n        date={date}\n        \n        />\n        <InfoBox \n        onClick={(e) => setCasesType(\"deaths\")} \n        isRed\n        active={casesType === \"deaths\"} \n        title=\"Deaths\" \n        cases={FormatNum(countryInfo.todayDeaths)} \n        total={numeral(countryInfo.deaths).format(\"0.0a\")}\n        date={date}\n        />\n        </div>\n\n      {SelectorView===\"map\" && (\n        <div className=\"app__map\">\n         <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n        </div>\n      )}\n\n      {SelectorView===\"table\"&& (\n        <div className=\"app__table\">\n        <Table countries={tableData}  info={countryInfo}/>\n        </div>\n      )}\n    \n      {SelectorView===\"graph\" && (\n        <div>\n          \n          {chartView===\"bar/pie\" && (\n          <div className=\"both__display\">\n            <div className=\"app__bar\">\n            <CountryGraph casesType={casesType} country={country}/>  \n            </div>\n            <div className=\"app__bar\">\n            <Chart info={countryInfo}/>\n            </div>\n         </div>\n          )}\n\n          {chartView===\"line\" &&(\n            <div className=\"app__chart\">\n            <Graph casesType={casesType}/>    \n            </div>\n          )}\n\n        </div>\n      )}\n\n      </div> {/* end oh app body*/}\n  \n  {/* end oh App*/}\n    </div> \n  );\n}\n\n\nfunction refreshPage() {\n  window.location.reload(false); //Refresh the page\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Globe_img.a09d7996.JPG\";","module.exports = __webpack_public_path__ + \"static/media/covid_logo.e19d6f21.JPG\";"],"sourceRoot":""}